-- DemonHub Script for Roblox
-- Version: 1.5.0
local SCRIPT_VERSION = "1.5.0"

-- Load WindUI
local WindUI = loadstring(game:HttpGet("https://github.com/Footagesus/WindUI/releases/latest/download/main.lua"))()

-- Services
local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local RunService = game:GetService("RunService")
local TweenService = game:GetService("TweenService")
local Workspace = game:GetService("Workspace")
local LocalPlayer = Players.LocalPlayer
local petsPhysical = Workspace:WaitForChild("PetsPhysical", 30)
local ActivePetService = ReplicatedStorage:WaitForChild("GameEvents", 25):WaitForChild("ActivePetService", 25)
local GetPetCooldown = ReplicatedStorage:WaitForChild("GameEvents"):WaitForChild("GetPetCooldown")

-- State
local petData = {}
local selectedPets = {}
local petDropdown
local autoMiddleActive = false
local petCooldownESPActive = false
local petModelCache = {}
local coroutines = {}

-- Helper Functions
local function isValidPetID(id)
    return typeof(id) == "string" and id:match("^%b{}$") ~= nil
end

local function getPetNames()
    local newPetData = {}
    local success = pcall(function()
        local PlayerGui = LocalPlayer:WaitForChild("PlayerGui", 5)
        local ActivePetUI = PlayerGui:WaitForChild("ActivePetUI", 5)
        local Frame = ActivePetUI:WaitForChild("Frame", 5)
        local Main = Frame:WaitForChild("Main", 5)
        local ScrollingFrame = Main:WaitForChild("ScrollingFrame", 5)
        for _, frame in pairs(ScrollingFrame:GetChildren()) do
            if frame:IsA("Frame") and isValidPetID(frame.Name) then
                local petTypeLabel = frame:FindFirstChild("PET_TYPE")
                if petTypeLabel and petTypeLabel:IsA("TextLabel") then
                    local petName = petTypeLabel.Text
                    if petName and petName ~= "" then
                        newPetData[frame.Name] = petName
                    end
                end
            end
        end
    end)
    if not success then
        warn("Failed to fetch pet names.")
    end
    return newPetData
end

local function secondsToMinSec(seconds)
    if not seconds or seconds <= 0 then
        return "Ready"
    end
    local minutes = math.floor(seconds / 60)
    local remainingSeconds = math.floor(seconds % 60)
    return string.format("%dm %ds", minutes, remainingSeconds)
end

local function getPetIds()
    local petIds = {}
    local success, children = pcall(function()
        return LocalPlayer.PlayerGui:WaitForChild("ActivePetUI"):WaitForChild("Frame"):WaitForChild("Main"):WaitForChild("ScrollingFrame"):GetChildren()
    end)
    if success then
        local pattern = "{.-}"
        for _, child in ipairs(children) do
            for match in string.gmatch(child.Name, pattern) do
                table.insert(petIds, match)
            end
        end
    end
    return petIds
end

local function findPathByPetId(petId)
    if petModelCache[petId] then
        return petModelCache[petId]
    end
    local descendants = petsPhysical:GetDescendants()
    local matches = {}
    local pattern = "{.-}"
    for _, descendant in ipairs(descendants) do
        local name = descendant.Name
        for match in string.gmatch(name, pattern) do
            if match == petId then
                table.insert(matches, {instance = descendant})
            end
        end
    end
    if #matches > 0 then
        petModelCache[petId] = matches
    end
    return matches
end

local function createOrUpdatePetCooldownESP(petModel, petId, cooldownTime)
    if not petModel or not petModel:IsA("Model") then
        return
    end
    local primaryPart = petModel.PrimaryPart or petModel:FindFirstChildWhichIsA("BasePart")
    if not primaryPart then
        return
    end
    local billboard = primaryPart:FindFirstChild("CooldownESP")
    if not billboard then
        billboard = Instance.new("BillboardGui")
        billboard.Name = "CooldownESP"
        billboard.Adornee = primaryPart
        billboard.Size = UDim2.new(0, 150, 0, 60)
        billboard.StudsOffset = Vector3.new(0, 3, 0)
        billboard.AlwaysOnTop = true
        billboard.LightInfluence = 0
        billboard.Parent = primaryPart
        local frame = Instance.new("Frame")
        frame.Size = UDim2.new(1, 0, 1, 0)
        frame.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
        frame.BackgroundTransparency = 0.4
        frame.BorderSizePixel = 0
        frame.Parent = billboard
        local uiCorner = Instance.new("UICorner")
        uiCorner.CornerRadius = UDim.new(0, 8)
        uiCorner.Parent = frame
        local nameLabel = Instance.new("TextLabel")
        nameLabel.Name = "NameLabel"
        nameLabel.Size = UDim2.new(0.9, 0, 0.4, 0)
        nameLabel.Position = UDim2.new(0.05, 0, 0.1, 0)
        nameLabel.BackgroundTransparency = 1
        nameLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
        nameLabel.TextStrokeTransparency = 0.8
        nameLabel.TextStrokeColor3 = Color3.fromRGB(0, 0, 0)
        nameLabel.Font = Enum.Font.GothamBold
        nameLabel.TextSize = 16
        nameLabel.TextScaled = true
        nameLabel.Parent = frame
        local cooldownLabel = Instance.new("TextLabel")
        cooldownLabel.Name = "CooldownLabel"
        cooldownLabel.Size = UDim2.new(0.9, 0, 0.4, 0)
        cooldownLabel.Position = UDim2.new(0.05, 0, 0.5, 0)
        cooldownLabel.BackgroundTransparency = 1
        cooldownLabel.TextColor3 = Color3.fromRGB(200, 255, 200)
        cooldownLabel.TextStrokeTransparency = 0.8
        cooldownLabel.TextStrokeColor3 = Color3.fromRGB(0, 0, 0)
        cooldownLabel.Font = Enum.Font.GothamBold
        cooldownLabel.TextSize = 16
        cooldownLabel.TextScaled = true
        cooldownLabel.Parent = frame
        frame.BackgroundTransparency = 1
        local tweenInfo = TweenInfo.new(0.5, Enum.EasingStyle.Sine, Enum.EasingDirection.In)
        local tween = TweenService:Create(frame, tweenInfo, {BackgroundTransparency = 0.4})
        tween:Play()
    end
    local frame = billboard:FindFirstChildWhichIsA("Frame")
    local nameLabel = frame and frame:FindFirstChild("NameLabel")
    local cooldownLabel = frame and frame:FindFirstChild("CooldownLabel")
    if nameLabel and cooldownLabel then
        local petName = petData[petId] or "Unknown"
        local displayText = "Cooldown: " .. secondsToMinSec(cooldownTime)
        if nameLabel.Text ~= petName then
            nameLabel.Text = petName
        end
        if cooldownLabel.Text ~= displayText then
            cooldownLabel.Text = displayText
        end
    end
end

local function cleanupPetCooldownESP(petIds)
    for cachedPetId, matches in pairs(petModelCache) do
        if not table.find(petIds, cachedPetId) then
            for _, match in ipairs(matches) do
                local petModel = match.instance
                if petModel then
                    local primaryPart = petModel.PrimaryPart or petModel:FindFirstChildWhichIsA("BasePart")
                    if primaryPart then
                        local billboard = primaryPart:FindFirstChild("CooldownESP")
                        if billboard then
                            billboard:Destroy()
                        end
                    end
                end
            end
            petModelCache[cachedPetId] = nil
        end
    end
end

local function updatePetCooldowns()
    if not petCooldownESPActive then
        cleanupPetCooldownESP({})
        return
    end
    petData = getPetNames()
    local petIds = getPetIds()
    if #petIds == 0 then
        cleanupPetCooldownESP(petIds)
        return
    end
    cleanupPetCooldownESP(petIds)
    for _, petId in ipairs(petIds) do
        local matches = findPathByPetId(petId)
        if #matches == 0 then
            continue
        end
        for _, match in ipairs(matches) do
            local petModel = match.instance
            local success, result = pcall(function()
                return GetPetCooldown:InvokeServer(petId)
            end)
            if success and result and result[1] and result[1].Time then
                local cooldownTime = result[1].Time
                createOrUpdatePetCooldownESP(petModel, petId, cooldownTime)
            else
                createOrUpdatePetCooldownESP(petModel, petId, nil)
            end
        end
    end
end

local function stopCoroutine(name)
    if coroutines[name] then
        coroutines[name].running = false
        coroutines[name] = nil
    end
end

local function startCoroutine(name, func)
    stopCoroutine(name)
    coroutines[name] = {running = true}
    coroutines[name].thread = coroutine.create(func)
    coroutine.resume(coroutines[name].thread)
end

-- Create the main window
local Window = WindUI:CreateWindow({
    Title = "DemonHub",
    Icon = "rbxassetid://7733964712",
    Author = "DemonHub Team",
    Folder = "DemonHub",
    Size = UDim2.fromOffset(400, 300),
    Theme = "Dark",
    HasOutline = true
})

-- Create sections and tabs
local Tabs = {}
Tabs.PetsSection = Window:Section({Title = "Pets", Opened = true})
Tabs.AutoMiddleTab = Tabs.PetsSection:Tab({Title = "Auto Middle", Icon = "paw-print", Desc = "Continuous pet idle state"})
Tabs.PetESPTab = Tabs.PetsSection:Tab({Title = "Pet ESP", Icon = "eye", Desc = "Pet cooldown visuals"})

-- Auto Middle Tab
local petNames = {"[Click Refresh]"}
petDropdown = Tabs.AutoMiddleTab:Dropdown({
    Title = "Select Pets",
    Values = petNames,
    Value = {},
    Multi = true,
    AllowNone = true,
    Callback = function(selectedOptions)
        selectedPets = {}
        selectedOptions = type(selectedOptions) == "table" and selectedOptions or {selectedOptions}
        for petId, petName in pairs(petData) do
            for _, selectedName in ipairs(selectedOptions) do
                if petName == selectedName then
                    table.insert(selectedPets, petId)
                end
            end
        end
        if autoMiddleActive and #selectedPets == 0 then
            stopCoroutine("AutoMiddle")
            autoMiddleActive = false
            pcall(function() Tabs.AutoMiddleTab:FindFirstChild("Auto Middle"):SetValue(false) end)
        end
    end
})

Tabs.AutoMiddleTab:Button({
    Title = "Refresh Pets",
    Icon = "refresh-cw",
    Callback = function()
        petData = getPetNames()
        petNames = {}
        for _, name in pairs(petData) do
            if name and name ~= "" then table.insert(petNames, name) end
        end
        table.sort(petNames)
        if petDropdown then pcall(function() petDropdown:Destroy() end) end
        petNames = #petNames > 0 and petNames or {"[No Pets Found]"}
        petDropdown = Tabs.AutoMiddleTab:Dropdown({
            Title = "Select Pets",
            Values = petNames,
            Value = #petNames > 0 and {petNames[1]} or {},
            Multi = true,
            AllowNone = true,
            Callback = function(selectedOptions)
                selectedPets = {}
                selectedOptions = type(selectedOptions) == "table" and selectedOptions or {selectedOptions}
                for petId, petName in pairs(petData) do
                    for _, selectedName in ipairs(selectedOptions) do
                        if petName == selectedName then table.insert(selectedPets, petId) end
                    end
                end
                if autoMiddleActive and #selectedPets == 0 then
                    stopCoroutine("AutoMiddle")
                    autoMiddleActive = false
                    pcall(function() Tabs.AutoMiddleTab:FindFirstChild("Auto Middle"):SetValue(false) end)
                end
            end
        })
        selectedPets = {}
        if #petNames > 0 then
            for petId, petName in pairs(petData) do
                if petName == petNames[1] then table.insert(selectedPets, petId) end
            end
        end
    end
})

Tabs.AutoMiddleTab:Toggle({
    Title = "Auto Middle",
    Icon = "toggle-right",
    Value = false,
    Type = "Checkbox",
    Callback = function(value)
        autoMiddleActive = value
        if autoMiddleActive and #selectedPets > 0 then
            startCoroutine("AutoMiddle", function()
                while coroutines.AutoMiddle and coroutines.AutoMiddle.running and #selectedPets > 0 do
                    for _, petId in ipairs(selectedPets) do
                        pcall(function() ActivePetService:FireServer("SetPetState", petId, "Idle") end)
                    end
                    task.wait(1)
                end
                autoMiddleActive = false
                pcall(function() Tabs.AutoMiddleTab:FindFirstChild("Auto Middle"):SetValue(false) end)
            end)
        else
            stopCoroutine("AutoMiddle")
            autoMiddleActive = false
        end
    end
})

-- Pet ESP Tab
Tabs.PetESPTab:Toggle({
    Title = "Pet Cooldown ESP",
    Icon = "eye",
    Value = false,
    Type = "Checkbox",
    Callback = function(value)
        petCooldownESPActive = value
        if petCooldownESPActive then
            updatePetCooldowns()
            startCoroutine("PetCooldownESP", function()
                local lastUpdate = 0
                while coroutines.PetCooldownESP and coroutines.PetCooldownESP.running do
                    local currentTime = tick()
                    if currentTime - lastUpdate >= 2 then
                        pcall(updatePetCooldowns)
                        lastUpdate = currentTime
                    end
                    task.wait(0.1)
                end
                petCooldownESPActive = false
                pcall(function() Tabs.PetESPTab:FindFirstChild("Pet Cooldown ESP"):SetValue(false) end)
                updatePetCooldowns()
            end)
        else
            stopCoroutine("PetCooldownESP")
            updatePetCooldowns()
            petCooldownESPActive = false
        end
    end
})

-- Initial pet data load
petData = getPetNames()
petNames = {}
for _, name in pairs(petData) do
    if name and name ~= "" then table.insert(petNames, name) end
end
table.sort(petNames)
if petDropdown then
    pcall(function()
        petDropdown:SetValues(#petNames > 0 and petNames or {"[No Pets Found]"})
        petDropdown:SetValue(#petNames > 0 and {petNames[1]} or {})
    end)
end

-- Cleanup on script end
game:BindToClose(function()
    for name, co in pairs(coroutines) do
        co.running = false
    end
    if petCooldownESPActive then
        updatePetCooldowns()
    end
end)
